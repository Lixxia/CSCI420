
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CalcParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return mySym.class;
}

  /** Default constructor. */
  public CalcParser() {super();}

  /** Constructor which sets the default scanner. */
  public CalcParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CalcParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\003\000\002\002\004\000\002\004" +
    "\005\000\002\004\006\000\002\004\006\000\002\004\004" +
    "\000\002\004\006\000\002\004\006\000\002\004\005\000" +
    "\002\003\005\000\002\003\003\000\002\006\005\000\002" +
    "\006\003\000\002\005\005\000\002\005\003\000\002\007" +
    "\005\000\002\007\004\000\002\007\003\000\002\007\003" +
    "\000\002\010\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\003\000\002\012\003\000" +
    "\002\014\010\000\002\014\006\000\002\014\010\000\002" +
    "\013\005\000\002\013\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\016\004\014\006\012\011\010\013\011\014" +
    "\004\016\013\001\002\000\004\045\037\001\002\000\006" +
    "\021\073\043\072\001\002\000\004\002\001\001\002\000" +
    "\004\002\071\001\002\000\004\045\037\001\002\000\016" +
    "\004\014\006\012\011\010\013\011\014\004\016\013\001" +
    "\002\000\006\021\uffee\043\uffee\001\002\000\006\007\023" +
    "\010\022\001\002\000\016\004\014\006\012\011\010\013" +
    "\011\014\004\016\013\001\002\000\004\005\021\001\002" +
    "\000\006\005\ufff7\020\017\001\002\000\016\004\014\006" +
    "\012\011\010\013\011\014\004\016\013\001\002\000\004" +
    "\005\ufff8\001\002\000\010\002\uffff\005\uffff\020\uffff\001" +
    "\002\000\004\006\060\001\002\000\004\006\032\001\002" +
    "\000\004\017\030\001\002\000\006\017\uffda\020\026\001" +
    "\002\000\006\007\023\010\022\001\002\000\004\017\uffdb" +
    "\001\002\000\016\004\014\006\012\011\010\013\011\014" +
    "\004\016\013\001\002\000\010\002\ufffe\005\ufffe\020\ufffe" +
    "\001\002\000\004\025\033\001\002\000\004\006\035\001" +
    "\002\000\010\017\uffdd\020\uffdd\021\036\001\002\000\012" +
    "\017\uffd9\020\uffd9\021\uffd9\037\uffd9\001\002\000\004\045" +
    "\037\001\002\000\052\002\ufff5\005\ufff5\012\ufff5\015\ufff5" +
    "\017\ufff5\020\ufff5\022\ufff5\023\ufff5\026\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\040\ufff5\041\ufff5\044\ufff5\001\002\000\040\017\uffde\020" +
    "\uffde\022\050\023\043\026\053\027\044\030\055\031\052" +
    "\032\054\033\047\034\046\035\041\036\045\040\042\041" +
    "\056\001\002\000\004\045\uffea\001\002\000\004\045\uffec" +
    "\001\002\000\004\045\uffe5\001\002\000\004\045\uffe3\001" +
    "\002\000\004\045\uffeb\001\002\000\004\045\uffe9\001\002" +
    "\000\004\045\uffe8\001\002\000\004\045\uffe4\001\002\000" +
    "\004\045\037\001\002\000\004\045\uffe6\001\002\000\004" +
    "\045\uffe2\001\002\000\004\045\uffe7\001\002\000\004\045" +
    "\uffe1\001\002\000\004\045\uffed\001\002\000\052\002\ufff6" +
    "\005\ufff6\012\ufff6\015\ufff6\017\ufff6\020\ufff6\022\050\023" +
    "\043\026\053\027\044\030\055\031\052\032\054\033\047" +
    "\034\046\035\041\036\045\040\042\041\056\044\ufff6\001" +
    "\002\000\004\025\061\001\002\000\004\006\035\001\002" +
    "\000\004\037\063\001\002\000\004\045\037\001\002\000" +
    "\040\017\uffdc\020\uffdc\022\050\023\043\026\053\027\044" +
    "\030\055\031\052\032\054\033\047\034\046\035\041\036" +
    "\045\040\042\041\056\001\002\000\010\002\ufffc\005\ufffc" +
    "\020\ufffc\001\002\000\036\012\067\022\050\023\043\026" +
    "\053\027\044\030\055\031\052\032\054\033\047\034\046" +
    "\035\041\036\045\040\042\041\056\001\002\000\016\004" +
    "\014\006\012\011\010\013\011\014\004\016\013\001\002" +
    "\000\010\002\ufffb\005\ufffb\020\ufffb\001\002\000\004\002" +
    "\000\001\002\000\004\045\037\001\002\000\004\045\037" +
    "\001\002\000\042\002\ufff9\005\ufff9\020\ufff9\022\050\023" +
    "\043\026\053\027\044\030\055\031\052\032\054\033\047" +
    "\034\046\035\041\036\045\040\042\041\056\001\002\000" +
    "\036\022\050\023\043\026\053\027\044\030\055\031\052" +
    "\032\054\033\047\034\046\035\041\036\045\040\042\041" +
    "\056\044\076\001\002\000\010\002\ufffa\005\ufffa\020\ufffa" +
    "\001\002\000\036\015\100\022\050\023\043\026\053\027" +
    "\044\030\055\031\052\032\054\033\047\034\046\035\041" +
    "\036\045\040\042\041\056\001\002\000\016\004\014\006" +
    "\012\011\010\013\011\014\004\016\013\001\002\000\010" +
    "\002\ufffd\005\ufffd\020\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\010\002\006\004\005\010\004\001\001\000" +
    "\004\006\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\065\001\001\000\006\004" +
    "\064\010\004\001\001\000\002\001\001\000\006\013\023" +
    "\014\024\001\001\000\010\003\014\004\015\010\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\017" +
    "\004\015\010\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\026\014\024\001\001\000" +
    "\002\001\001\000\006\004\030\010\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\037\001\001" +
    "\000\002\001\001\000\004\011\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\050\001\001\000\002\001\001" +
    "\000\004\015\061\001\001\000\002\001\001\000\004\006" +
    "\063\001\001\000\004\011\050\001\001\000\002\001\001" +
    "\000\004\011\050\001\001\000\006\004\067\010\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\074" +
    "\001\001\000\004\006\073\001\001\000\004\011\050\001" +
    "\001\000\004\011\050\001\001\000\002\001\001\000\004" +
    "\011\050\001\001\000\006\004\100\010\004\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalcParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalcParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalcParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CalcParser$actions {
  private final CalcParser parser;

  /** Constructor */
  CUP$CalcParser$actions(CalcParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CalcParser$do_action_part00000000(
    int                        CUP$CalcParser$act_num,
    java_cup.runtime.lr_parser CUP$CalcParser$parser,
    java.util.Stack            CUP$CalcParser$stack,
    int                        CUP$CalcParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalcParser$result;

      /* select the action based on the action number */
      switch (CUP$CalcParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= command 
            {
              Program RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Program(c); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		RESULT = start_val;
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CalcParser$parser.done_parsing();
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // command ::= BEGIN commands END 
            {
              Command RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Commands c = (Commands)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = new Command(c); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command ::= LET decls IN command 
            {
              Command RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Decls ds = (Decls)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Command(ds,c); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // command ::= WHILE expr DO command 
            {
              Command RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Command(e,c); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // command ::= ELSE command 
            {
              Command RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Command(c); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // command ::= IF expr THEN command 
            {
              Command RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Command(e,c); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= varExpr LPAREN expr RPAREN 
            {
              Command RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).right;
		VarExpr v = (VarExpr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = new Command(v,e); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= varExpr ASSIGN expr 
            {
              Command RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		VarExpr v = (VarExpr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Command(v, e); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // commands ::= command SEMI commands 
            {
              Commands RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Commands cs = (Commands)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Commands(c, cs); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("commands",1, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // commands ::= command 
            {
              Commands RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Command c = (Command)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Commands(c); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("commands",1, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr binOp expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		BinOp op = (BinOp)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Expr(e1, e2, op); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= INTEGER 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Expr(e); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exprs ::= expr COMMA exprs 
            {
              Exprs RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Exprs es = (Exprs)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Exprs(e, es); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("exprs",3, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exprs ::= expr 
            {
              Exprs RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Exprs(e); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("exprs",3, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // primExpr ::= LPAREN expr RPAREN 
            {
              PrimExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = new PrimExpr(e); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("primExpr",5, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // primExpr ::= unaryOp primExpr 
            {
              PrimExpr RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		UnaryOp u = (UnaryOp)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		PrimExpr p = (PrimExpr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new PrimExpr(u,p); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("primExpr",5, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // primExpr ::= varExpr 
            {
              PrimExpr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		VarExpr v = (VarExpr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new PrimExpr(v); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("primExpr",5, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // primExpr ::= INTEGER 
            {
              PrimExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new PrimExpr(i); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("primExpr",5, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varExpr ::= IDENTIFIER 
            {
              VarExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new VarExpr(id); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("varExpr",6, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // binOp ::= OR 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("||"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // binOp ::= AND 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("&&"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // binOp ::= GTHEN 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp(">"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // binOp ::= GEQUAL 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp(">="); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // binOp ::= NEQUAL 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("!="); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // binOp ::= EEQUAL 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("=="); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // binOp ::= LEQUAL 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("<="); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // binOp ::= LTHEN 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("<"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // binOp ::= MINUS 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("-"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // binOp ::= PLUS 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("+"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // binOp ::= DIVIDE 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("/"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // binOp ::= TIMES 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("*"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // binOp ::= EXPONENT 
            {
              BinOp RESULT =null;
		 RESULT = new BinOp("^"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("binOp",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unaryOp ::= NOT 
            {
              UnaryOp RESULT =null;
		 RESULT = new UnaryOp("!"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("unaryOp",8, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unaryOp ::= MINUS 
            {
              UnaryOp RESULT =null;
		 RESULT = new UnaryOp("-"); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("unaryOp",8, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // decl ::= VAR IDENTIFIER COLON typeDen ASSIGN expr 
            {
              Decl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		TypeDen t = (TypeDen)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Decl(i,t,e); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-5)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // decl ::= VAR IDENTIFIER COLON typeDen 
            {
              Decl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		TypeDen t = (TypeDen)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Decl(i,t); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decl ::= CONST IDENTIFIER COLON typeDen EQUALS expr 
            {
              Decl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		TypeDen t = (TypeDen)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Decl(i,t,e); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("decl",10, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-5)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // decls ::= decl SEMI decls 
            {
              Decls RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Decls ds = (Decls)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Decls(d, ds); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("decls",9, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // decls ::= decl 
            {
              Decls RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Decls(d); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("decls",9, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typeDen ::= IDENTIFIER 
            {
              TypeDen RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new TypeDen(id); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("typeDen",11, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CalcParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CalcParser$do_action(
    int                        CUP$CalcParser$act_num,
    java_cup.runtime.lr_parser CUP$CalcParser$parser,
    java.util.Stack            CUP$CalcParser$stack,
    int                        CUP$CalcParser$top)
    throws java.lang.Exception
    {
              return CUP$CalcParser$do_action_part00000000(
                               CUP$CalcParser$act_num,
                               CUP$CalcParser$parser,
                               CUP$CalcParser$stack,
                               CUP$CalcParser$top);
    }
}

}
